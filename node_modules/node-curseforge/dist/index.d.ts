import { Game, Mod, Category, ModFile, types, exceptions, enums, MinecraftModLoader, MinecraftVersion } from "./objects";
import { FingerprintFuzzyMatch, FingerprintMatchResult, FolderFingerprints, GameVersionsByType, GameVersionType, Pagination, PagingOptions, SearchOptions } from "./objects/types";
import { ModLoaderType } from "./objects/enums";
export { Game, Mod, Category, ModFile, types as Types, exceptions as Exceptions, enums as Enums };
/**
 * the default exported class of the package.
 */
declare class Curseforge {
    /**
     * @ignore
     */
    private api_token;
    /**
     * @ignore
     */
    private API_URL;
    /**
     * Set the token for this instance.
     * @param token the CFCore token.
     */
    set_token(token: string): void;
    /**
     * Get a game specified by `game_id`
     * @param game_id Game id or slug to use.
     */
    get_game(game_id: number | string): Promise<Game>;
    /**
     * Get multiple available games.
     * @param index Optional index to use for paging.
     * @param pageSize Size to show per page. Maximum is 50.
     * @returns A Promise with a paging property filled with the Pagination.
     */
    get_games(index?: number, pageSize?: number): Promise<Game[] & {
        paging: Pagination;
    }>;
    /**
     * Get the different game versions supported by CFCore.
     * @param game Game to request the versions for.
     * @returns Array of Game Versions
     */
    get_game_versions(game: number | Game): Promise<GameVersionsByType[]>;
    /**
     * Return a list of version types.
     */
    get_game_versions_type(game: number | Game): Promise<GameVersionType[]>;
    /**
     * Return a list of categories associated for a game.
     * @param game the game id or game object.
     * @param classId optional root category (for example. Resourcepacks, Savegames, Mods)
     * @returns list of Categories fitting the game (and also classId)
     */
    get_categories(game: number | Game, classId?: number): Promise<Category[]>;
    search_mods(game: number | Game, options?: SearchOptions & PagingOptions): Promise<Mod[] & {
        paging: Pagination;
    }>;
    get_mod(mod_id: number): Promise<Mod>;
    get_mods(...mods: number[]): Promise<Mod[]>;
    get_featured_mods(game: Game | number, gameVersionType?: number | GameVersionType, excludedMods?: number[]): Promise<{
        featured: Mod[];
        popular: Mod[];
        recentlyUpdated: Mod[];
    }>;
    get_mod_description(mod: Mod | number): Promise<string>;
    get_file(mod: Mod | number, fileId: number): Promise<ModFile>;
    get_files(mod: Mod | number, searchOptions?: {
        gameVersion?: string;
        modLoaderType?: ModLoaderType | number;
        gameVersionTypeId?: number;
    } & PagingOptions): Promise<ModFile[] & {
        "paging": Pagination;
    }>;
    get_file_changelog(mod: Mod | number, file: ModFile | number): Promise<string>;
    get_file_download(mod: Mod | number, file: ModFile | number): Promise<string>;
    get_fingerprints(fingerprints: number[]): Promise<FingerprintMatchResult>;
    get_fingerprints_fuzzy(game: Game | number, fingerprints: FolderFingerprints[]): Promise<FingerprintFuzzyMatch[]>;
    get_minecraft_versions(): Promise<MinecraftVersion[]>;
    get_minecraft_version(version: MinecraftVersion | number): Promise<MinecraftVersion>;
    get_minecraft_modloaders(): Promise<MinecraftModLoader[]>;
    get_minecraft_modloader(modloader: string): Promise<MinecraftModLoader>;
    /**
     * Create a new curseforge client.
     *
     * @param token - The API Token from Curseforge. You can receive one from https://console.curseforge.com/#/api-keys
     */
    constructor(token: string);
}
export default Curseforge;
export { Curseforge };
//# sourceMappingURL=index.d.ts.map