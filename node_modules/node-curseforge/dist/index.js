"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Curseforge = exports.Enums = exports.Exceptions = exports.Types = exports.ModFile = exports.Category = exports.Mod = exports.Game = void 0;
var objects_1 = require("./objects");
Object.defineProperty(exports, "Game", { enumerable: true, get: function () { return objects_1.Game; } });
Object.defineProperty(exports, "Mod", { enumerable: true, get: function () { return objects_1.Mod; } });
Object.defineProperty(exports, "Category", { enumerable: true, get: function () { return objects_1.Category; } });
Object.defineProperty(exports, "ModFile", { enumerable: true, get: function () { return objects_1.ModFile; } });
Object.defineProperty(exports, "Types", { enumerable: true, get: function () { return objects_1.types; } });
Object.defineProperty(exports, "Exceptions", { enumerable: true, get: function () { return objects_1.exceptions; } });
Object.defineProperty(exports, "Enums", { enumerable: true, get: function () { return objects_1.enums; } });
var utils = require("./utils");
var url_1 = require("url");
var exceptions_1 = require("./objects/exceptions");
/**
 * the default exported class of the package.
 */
var Curseforge = /** @class */ (function () {
    /**
     * Create a new curseforge client.
     *
     * @param token - The API Token from Curseforge. You can receive one from https://console.curseforge.com/#/api-keys
     */
    function Curseforge(token) {
        /**
         * @ignore
         */
        this.API_URL = new url_1.URL("https://api.curseforge.com/v1/");
        this.set_token(token);
    }
    /**
     * Set the token for this instance.
     * @param token the CFCore token.
     */
    Curseforge.prototype.set_token = function (token) {
        utils.set_option(token);
    };
    // []============================[]
    // ||    Game Related Methods    ||
    // []============================[]
    /**
     * Get a game specified by `game_id`
     * @param game_id Game id or slug to use.
     */
    Curseforge.prototype.get_game = function (game_id) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res, _game, _games, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof (game_id) == "number")) return [3 /*break*/, 2];
                        return [4 /*yield*/, utils.get(this.API_URL + "games/" + game_id)];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(new objects_1.Game(this, res.data.data));
                                break;
                            case 404:
                                reject(new exceptions_1.ErrorNotFound());
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorInternalServer());
                                break;
                        }
                        return [3 /*break*/, 8];
                    case 2:
                        _game = void 0;
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 7, , 8]);
                        _a.label = 4;
                    case 4:
                        if (!(_game == undefined)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.get_games()];
                    case 5:
                        _games = _a.sent();
                        _game = _games.find(function (g) { return g.slug == game_id; });
                        if (_game) {
                            resolve(_game);
                            return [3 /*break*/, 6];
                        }
                        else if (_games.paging.pageSize * (_games.paging.index + 1) >= _games.paging.totalCount) {
                            reject(new exceptions_1.ErrorNotFound());
                            return [3 /*break*/, 6];
                        }
                        return [3 /*break*/, 4];
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        error_1 = _a.sent();
                        reject(error_1);
                        return [3 /*break*/, 8];
                    case 8: return [2 /*return*/];
                }
            });
        }); });
    };
    /**
     * Get multiple available games.
     * @param index Optional index to use for paging.
     * @param pageSize Size to show per page. Maximum is 50.
     * @returns A Promise with a paging property filled with the Pagination.
     */
    Curseforge.prototype.get_games = function (index, pageSize) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var url, res, games, _i, _a, game_data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        url = new url_1.URL(this.API_URL + "games");
                        if (index)
                            url.searchParams.set("index", index.toString());
                        if (pageSize)
                            url.searchParams.set("pageSize", Math.max(pageSize, 50).toString());
                        return [4 /*yield*/, utils.get(url.href)];
                    case 1:
                        res = _b.sent();
                        switch (res.code) {
                            case 200:
                                games = Object.assign([], { paging: res.data.pagination });
                                for (_i = 0, _a = res.data.data; _i < _a.length; _i++) {
                                    game_data = _a[_i];
                                    games.push(new objects_1.Game(this, game_data));
                                }
                                resolve(games);
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorInternalServer());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    /**
     * Get the different game versions supported by CFCore.
     * @param game Game to request the versions for.
     * @returns Array of Game Versions
     */
    Curseforge.prototype.get_game_versions = function (game) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils.get(this.API_URL + "games/" + utils.cleanse(game) + "/versions")];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(res.data.data);
                                break;
                            case 404:
                                reject(new exceptions_1.ErrorNotFound("Game could not be found."));
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorInternalServer());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    /**
     * Return a list of version types.
     */
    Curseforge.prototype.get_game_versions_type = function (game) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils.get(this.API_URL + "games/" + utils.cleanse(game) + "/version-types")];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(res.data.data);
                                break;
                            case 404:
                                reject(new exceptions_1.ErrorNotFound("Game could not be found."));
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorInternalServer());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    /**
     * Return a list of categories associated for a game.
     * @param game the game id or game object.
     * @param classId optional root category (for example. Resourcepacks, Savegames, Mods)
     * @returns list of Categories fitting the game (and also classId)
     */
    Curseforge.prototype.get_categories = function (game, classId) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var uri, res, categories, _i, _a, cat;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        uri = new url_1.URL(this.API_URL + "categories");
                        uri.searchParams.set("gameId", utils.cleanse(game).toString());
                        if (classId)
                            uri.searchParams.set("classId", classId.toString());
                        return [4 /*yield*/, utils.get(uri.href)];
                    case 1:
                        res = _b.sent();
                        switch (res.code) {
                            case 200:
                                categories = [];
                                for (_i = 0, _a = res.data.data; _i < _a.length; _i++) {
                                    cat = _a[_i];
                                    categories.push(new objects_1.Category(this, cat));
                                }
                                resolve(categories);
                                break;
                            case 404:
                                reject(new exceptions_1.ErrorNotFound());
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorInternalServer());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    // []============================[]
    // ||    Mods Related Methods    ||
    // []============================[]
    Curseforge.prototype.search_mods = function (game, options) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var uri, _i, _a, key, res, mods, _b, _c, mod;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        uri = new url_1.URL(this.API_URL + "mods/search");
                        uri.searchParams.set("gameId", utils.cleanse(game).toString());
                        if (options) {
                            for (_i = 0, _a = Object.keys(options); _i < _a.length; _i++) {
                                key = _a[_i];
                                if (options[key] instanceof objects_1.Category)
                                    uri.searchParams.set(key, options[key].id);
                                else
                                    uri.searchParams.set(key, options[key]);
                            }
                        }
                        return [4 /*yield*/, utils.get(uri.href)];
                    case 1:
                        res = _d.sent();
                        switch (res.code) {
                            case 200:
                                mods = Object.assign([], { paging: res.data.pagination });
                                for (_b = 0, _c = res.data.data; _b < _c.length; _b++) {
                                    mod = _c[_b];
                                    mods.push(new objects_1.Mod(this, mod));
                                }
                                resolve(mods);
                                break;
                            case 404:
                                reject(new exceptions_1.ErrorBadRequest("The client send request is malformed."));
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorInternalServer());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Curseforge.prototype.get_mod = function (mod_id) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils.get(this.API_URL + "mods/" + mod_id.toString())];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(new objects_1.Mod(this, res.data.data));
                                break;
                            case 404:
                                reject(new exceptions_1.ErrorNotFound("Mod not found."));
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorInternalServer());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Curseforge.prototype.get_mods = function () {
        var _this = this;
        var mods = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            mods[_i] = arguments[_i];
        }
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res, mods_1, _i, _a, mod;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, utils.post(this.API_URL + "mods", { modIds: mods })];
                    case 1:
                        res = _b.sent();
                        switch (res.code) {
                            case 200:
                                mods_1 = [];
                                for (_i = 0, _a = res.data.data; _i < _a.length; _i++) {
                                    mod = _a[_i];
                                    mods_1.push(new objects_1.Mod(this, mod));
                                }
                                resolve(mods_1);
                                break;
                            case 400:
                                reject(new exceptions_1.ErrorBadRequest("Malformed request body."));
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorInternalServer());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Curseforge.prototype.get_featured_mods = function (game, gameVersionType, excludedMods) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res, result, _i, _a, mods, _b, _c, mod;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, utils.post(this.API_URL + "mods/featured", {
                            "gameId": utils.cleanse(game),
                            "gameVersionTypeId": gameVersionType ? gameVersionType : undefined,
                            "excludedMods": excludedMods ? excludedMods : []
                        })];
                    case 1:
                        res = _d.sent();
                        switch (res.code) {
                            case 200:
                                result = { featured: [], popular: [], recentlyUpdated: [] };
                                for (_i = 0, _a = Object.keys(res.data.data); _i < _a.length; _i++) {
                                    mods = _a[_i];
                                    for (_b = 0, _c = res.data.data[mods][1]; _b < _c.length; _b++) {
                                        mod = _c[_b];
                                        result[mods].push(new objects_1.Mod(this, mod));
                                    }
                                }
                                resolve(result);
                                break;
                            case 400:
                                reject(new exceptions_1.ErrorBadRequest());
                                break;
                            case 404:
                                reject(new exceptions_1.ErrorNotFound());
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorInternalServer());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Curseforge.prototype.get_mod_description = function (mod) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils.get(this.API_URL + "mods/" + utils.cleanse(mod) + "/description")];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(res.data.data);
                                break;
                            case 404:
                                reject(new exceptions_1.ErrorNotFound());
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorInternalServer());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    // []=============================[]
    // ||  Mod Files Related Methods  ||
    // []=============================[]
    Curseforge.prototype.get_file = function (mod, fileId) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils.get(this.API_URL + "mods/" + utils.cleanse(mod) + "/files/" + fileId)];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(new objects_1.ModFile(this, res.data.data));
                                break;
                            case 404:
                                reject(new exceptions_1.ErrorNotFound());
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorInternalServer());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Curseforge.prototype.get_files = function (mod, searchOptions) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var uri, res, files, _i, _a, file;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        uri = new url_1.URL(this.API_URL + "mods/" + utils.cleanse(mod) + "/files");
                        if (searchOptions) {
                            if (searchOptions.gameVersion)
                                uri.searchParams.set("gameVersion", searchOptions.gameVersion);
                            if (searchOptions.modLoaderType)
                                uri.searchParams.set("modLoaderType", searchOptions.modLoaderType.toString());
                            if (searchOptions.gameVersionTypeId)
                                uri.searchParams.set("gameVersionTypeId", searchOptions.gameVersionTypeId.toString());
                            if (searchOptions.index)
                                uri.searchParams.set("index", searchOptions.index.toString());
                            if (searchOptions.pageSize)
                                uri.searchParams.set("pageSize", searchOptions.pageSize.toString());
                        }
                        return [4 /*yield*/, utils.get(uri.href)];
                    case 1:
                        res = _b.sent();
                        switch (res.code) {
                            case 200:
                                files = Object.assign([], { "paging": res.data.pagination });
                                for (_i = 0, _a = res.data.data; _i < _a.length; _i++) {
                                    file = _a[_i];
                                    files.push(new objects_1.ModFile(this, file));
                                }
                                resolve(files);
                                break;
                            case 404:
                                reject(new exceptions_1.ErrorNotFound());
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorInternalServer());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Curseforge.prototype.get_file_changelog = function (mod, file) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils.get(this.API_URL + "mods/" + utils.cleanse(mod) + "/files/" + utils.cleanse(file) + "/changelog")];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(res.data.data);
                                break;
                            case 404:
                                reject(new exceptions_1.ErrorNotFound());
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorInternalServer());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Curseforge.prototype.get_file_download = function (mod, file) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils.get(this.API_URL + "mods/" + utils.cleanse(mod) + "/files/" + utils.cleanse(file) + "/download-url")];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(res.data.data);
                                break;
                            case 404:
                                break;
                            case 500:
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    // []=============================[]
    // || Fingerprint Related Methods ||
    // []=============================[]
    Curseforge.prototype.get_fingerprints = function (fingerprints) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils.post(this.API_URL + "fingerprints", { fingerprints: fingerprints })];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(res.data.data);
                                break;
                            case 400:
                                reject(new exceptions_1.ErrorBadRequest());
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorNotFound());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Curseforge.prototype.get_fingerprints_fuzzy = function (game, fingerprints) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils.post(this.API_URL + "fingerprints/fuzzy", { game: utils.cleanse(game), fingerprints: fingerprints })];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(res.data.data.fuzzyMatches);
                                break;
                            case 400:
                                reject(new exceptions_1.ErrorBadRequest());
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorNotFound());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Curseforge.prototype.get_minecraft_versions = function () {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils.get(this.API_URL + "minecraft/version")];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(res.data.data.map(function (version) { return new objects_1.MinecraftVersion(_this, version); }));
                                break;
                            case 400:
                                reject(new exceptions_1.ErrorBadRequest());
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorNotFound());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Curseforge.prototype.get_minecraft_version = function (version) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils.get(this.API_URL + "minecraft/version/" + utils.cleanse(version))];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(new objects_1.MinecraftVersion(this, res.data.data));
                                break;
                            case 400:
                                reject(new exceptions_1.ErrorBadRequest());
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorNotFound());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Curseforge.prototype.get_minecraft_modloaders = function () {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils.get(this.API_URL + "minecraft/modloader")];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(res.data.data.map(function (modloader) { return new objects_1.MinecraftModLoader(_this, modloader); }));
                                break;
                            case 400:
                                reject(new exceptions_1.ErrorBadRequest());
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorNotFound());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    Curseforge.prototype.get_minecraft_modloader = function (modloader) {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils.get(this.API_URL + "minecraft/modloader/" + modloader)];
                    case 1:
                        res = _a.sent();
                        switch (res.code) {
                            case 200:
                                resolve(new objects_1.MinecraftModLoader(this, res.data.data));
                                break;
                            case 400:
                                reject(new exceptions_1.ErrorBadRequest());
                                break;
                            case 500:
                                reject(new exceptions_1.ErrorNotFound());
                                break;
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    return Curseforge;
}());
exports.Curseforge = Curseforge;
exports.default = Curseforge;
//# sourceMappingURL=index.js.map