"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanse = exports.post = exports.get = exports.set_option = void 0;
var https_1 = require("https");
var interfaces_1 = require("./objects/interfaces");
var https_headers;
function set_option(header) {
    https_headers = {
        "x-api-key": header
    };
}
exports.set_option = set_option;
/**
 * @hidden
 * @param method - http method to use for request.
 * @param url - url to request.
 * @param body - Optional request data to send along.
 */
function rq(method, url, body) {
    return new Promise(function (resolve, reject) {
        var body_headers = {};
        var body_data = body ? JSON.stringify(body) : null;
        if (body_data) {
            body_headers = {
                "Content-Type": "application/json",
                "Content-Length": Buffer.byteLength(body_data)
            };
        }
        var req = (0, https_1.request)(url, {
            method: method,
            headers: __assign(__assign({ "Accept": "application/json" }, https_headers), body_headers)
        });
        req.on("response", function (res) {
            var data = "";
            res.on("data", function (chunk) { data += chunk; });
            res.on("end", function () {
                if (data == "" || data == undefined)
                    resolve({ "code": res.statusCode });
                else
                    resolve({
                        "code": res.statusCode,
                        "data": JSON.parse(data)
                    });
            });
        });
        if (body_data) {
            req.write(body_data);
        }
        req.end();
    });
}
/**
 * @hidden
 */
function get(url, body) {
    return rq("GET", url, body);
}
exports.get = get;
/**
 * @hidden
 */
function post(url, body) {
    return rq("POST", url, body);
}
exports.post = post;
/**
 * @hidden
 */
function cleanse(object) {
    return object instanceof interfaces_1.CFObject ? object.id : object;
}
exports.cleanse = cleanse;
//# sourceMappingURL=utils.js.map