"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
var interfaces_1 = require("./interfaces");
/**
 * Class for working with a specific mod from the CF-Core api.
 * Use the Curseforge class to get mod objects.
 */
var Mod = /** @class */ (function (_super) {
    __extends(Mod, _super);
    /** @hidden */
    function Mod(_client, data) {
        var _this = _super.call(this, _client) || this;
        _this.id = data.id;
        _this.gameId = data.gameId;
        _this.name = data.name;
        _this.slug = data.slug;
        _this.links = data.links;
        _this.summary = data.summary;
        _this.status = data.status;
        _this.downloadCount = data.downloadCount;
        _this.isFeatured = data.isFeatured;
        _this.primaryCategoryId = data.primaryCategoryId;
        _this.categories = data.categories;
        _this.authors = data.authors;
        _this.logo = data.logo;
        _this.thumbnails = data.thumbnails;
        _this.mainFileId = data.mainFileId;
        _this.latestFiles = data.latestFiles.map(function (file) { return new _1.ModFile(_client, file); });
        _this.latestFilesIndexes = data.latestFilesIndexes;
        _this.dateCreated = new Date(data.dateCreated);
        _this.dateModified = new Date(data.dateModified);
        _this.dateReleased = new Date(data.dateReleased);
        _this.allowedModDistribution = data.allowedModDistribution;
        return _this;
    }
    /**
     *
     * @param searchOptions Options to use when getting the files for this mod.
     * @returns mod files found using this method.
     */
    Mod.prototype.get_files = function (searchOptions) {
        return this._client.get_files(this.id, searchOptions);
    };
    /**
     * Get the description for this mod in html.
     * @returns html string.
     */
    Mod.prototype.get_description = function () {
        return this._client.get_mod_description(this.id);
    };
    /**
     * Return a specific file from this mod.
     * @param fileId the id of the file to query.
     * @returns [[ModFile]] associated for this file or throws an error.
     */
    Mod.prototype.get_file = function (fileId) {
        return this._client.get_file(this, fileId);
    };
    return Mod;
}(interfaces_1.CFObject));
exports.default = Mod;
//# sourceMappingURL=Mod.js.map