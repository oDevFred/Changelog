"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var interfaces_1 = require("./interfaces");
var utils_1 = require("../utils");
/**
 * Represents a specific game from the CF-Core api.
 */
var Game = /** @class */ (function (_super) {
    __extends(Game, _super);
    function Game(_client, data) {
        var _this = _super.call(this, _client) || this;
        _this.id = data.id;
        _this.name = data.name;
        _this.slug = data.slug;
        _this.dateModified = new Date(data.dateModified);
        _this.assets = data.assets;
        _this.status = data.status;
        _this.apiStatus = data.apiStatus;
        return _this;
    }
    /**
     * Get the categories for this game.
     * @param classId Optional TopLevel id of the category to get from.
     * @returns a list of categories.
     */
    Game.prototype.get_categories = function (classId) {
        return this._client.get_categories(this.id, (0, utils_1.cleanse)(classId));
    };
    /**
     * Search for "mods" related to this game.
     * Mods also by default includes things like Resource packs / mod packs / custom worlds. Make sure to use the proper Top-Level Category if you only wants to find game modifications.
     * @param options Optional Options for searching and Paging.
     * @returns a list of found [[Mod]] as well as a paging value for Pagination.
     */
    Game.prototype.search_mods = function (options) {
        return this._client.search_mods(this.id, options);
    };
    /**
     *
     * @param gameVersionType Optional game version type to look for.
     * @param excludedMods a list of mods to not include.
     * @returns an object with multiple lists of [[Mod]]
     */
    Game.prototype.get_featured = function (gameVersionType, excludedMods) {
        return this._client.get_featured_mods(this.id, gameVersionType, excludedMods);
    };
    return Game;
}(interfaces_1.CFObject));
exports.default = Game;
//# sourceMappingURL=Game.js.map