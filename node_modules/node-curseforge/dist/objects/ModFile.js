"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = require("./enums");
var interfaces_1 = require("./interfaces");
var https = require("https");
var fs_1 = require("fs");
var crypto_1 = require("crypto");
/**
 * Represents a single CF-Core file for a specific mod.
 */
var ModFile = /** @class */ (function (_super) {
    __extends(ModFile, _super);
    function ModFile(_client, data) {
        var _this = _super.call(this, _client) || this;
        _this.id = data.id;
        _this.gameId = data.gameId;
        _this.modId = data.modId;
        _this.isAvailable = data.isAvailable;
        _this.displayName = data.displayName;
        _this.fileName = data.fileName;
        _this.releaseType = data.releaseType;
        _this.fileStatus = data.fileStatus;
        _this.hashes = data.hashes;
        _this.fileDate = new Date(data.fileDate);
        _this.fileLength = data.fileLength;
        _this.downloadCount = data.downloadCount;
        _this.downloadUrl = data.downloadUrl;
        _this.gameVersions = data.gameVersions;
        _this.sortableGameVersions = data.sortableGameVersions;
        _this.dependencies = data.dependencies;
        _this.exposeAsAlternative = data.exposeAsAlternative;
        _this.parentProjectFileId = data.parentProjectFileId;
        _this.alternateFileId = data.alternateFileId;
        _this.isServerPack = data.isServerPack;
        _this.serverPackFileId = data.serverPackFileId;
        _this.fileFingerprint = data.fileFingerprint;
        _this.modules = data.modules;
        return _this;
    }
    /**
     * @hidden
     */
    ModFile.prototype._download = function (url, path, verify) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var req = https.get(url);
            req.on("response", function (res) {
                if (res.statusCode == 200) {
                    var hash_1 = undefined;
                    if (verify) {
                        hash_1 = _this.hashes.find(function (hash) { return hash.algo == enums_1.FileHashAlgorithms.SHA1; });
                        if (!hash_1)
                            hash_1 = _this.hashes.find(function (hash) { return hash.algo == enums_1.FileHashAlgorithms.MD5; });
                        // No hash available. Can't verify. Sad.
                        if (!hash_1)
                            verify = false;
                    }
                    // File exists!
                    var stream_1 = (0, fs_1.createWriteStream)(path);
                    res.on("end", function () {
                        stream_1.close();
                        if (hash_1) {
                            var fileStream_1 = (0, fs_1.createReadStream)(path);
                            var h_1 = (0, crypto_1.createHash)(hash_1.algo == enums_1.FileHashAlgorithms.SHA1 ? "sha1" : "md5");
                            fileStream_1.on("end", function () {
                                fileStream_1.close();
                                var hashRes = h_1.digest("hex");
                                resolve(hashRes == hash_1.value);
                            });
                            fileStream_1.pipe(h_1);
                        }
                        else {
                            resolve(true);
                        }
                    });
                    res.pipe(stream_1);
                }
                else if (res.statusCode == 302) {
                    resolve(_this._download(res.headers.location, path, verify));
                }
                else {
                    reject("Error! No idea what happened");
                }
            });
            req.end();
        });
    };
    /**
     * Download this [[ModFile]].
     * @param path The path where the file should be saved.
     * @param verify Should the downloaded files hash be checked?
     * @returns the Promise resolves with true if download was successful and the hash fits (if verify is true.) returns false otherwise.
     */
    ModFile.prototype.download = function (path, verify) {
        if (verify === void 0) { verify = true; }
        return this._download(this.downloadUrl, path, verify);
    };
    /**
     * Get the mod associated with this mod file.
     * @returns the mod for this mod file.
     */
    ModFile.prototype.get_mod = function () {
        return this._client.get_mod(this.modId);
    };
    /**
     *
     * @param relations The types to get. This is a filter list to make sure that only requested dependencies are downloaded.
     * @returns a list of [[ModFile]] which got found as dependencies. Can be an empty array.
     */
    ModFile.prototype.get_dependencies = function (relations) {
        var _this = this;
        if (relations === void 0) { relations = [enums_1.FileRelationType.REQUIRED_DEPENDENCY]; }
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var mods, _i, _a, dependency, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        mods = [];
                        _i = 0, _a = this.dependencies;
                        _d.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        dependency = _a[_i];
                        if (!relations.includes(dependency.relationType)) return [3 /*break*/, 3];
                        _c = (_b = mods).push;
                        return [4 /*yield*/, this._client.get_file(dependency.modId, dependency.fileId)];
                    case 2:
                        _c.apply(_b, [_d.sent()]);
                        _d.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4:
                        resolve(mods);
                        return [2 /*return*/];
                }
            });
        }); });
    };
    /**
     * Get the changelog for this specific [[ModFile.]]
     * @returns The changelog in html.
     */
    ModFile.prototype.get_changelog = function () {
        return this._client.get_file_changelog(this.modId, this.id);
    };
    return ModFile;
}(interfaces_1.CFObject));
exports.default = ModFile;
//# sourceMappingURL=ModFile.js.map