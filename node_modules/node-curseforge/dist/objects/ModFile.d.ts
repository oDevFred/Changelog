/// <reference types="node" />
import { Mod } from ".";
import Curseforge from "..";
import { FileRelationType, FileReleaseType, FileStatus } from "./enums";
import { CFObject } from "./interfaces";
import { FileDependency, FileHash, FileModule, SortableGameVersion } from "./types";
import { PathLike } from "fs";
/**
 * Represents a single CF-Core file for a specific mod.
 */
export default class ModFile extends CFObject {
    readonly id: number;
    readonly gameId: number;
    readonly modId: number;
    readonly isAvailable: boolean;
    readonly displayName: string;
    readonly fileName: string;
    readonly releaseType: FileReleaseType;
    readonly fileStatus: FileStatus;
    readonly hashes: FileHash[];
    readonly fileDate: Date;
    readonly fileLength: bigint;
    readonly downloadCount: bigint;
    readonly downloadUrl: string;
    readonly gameVersions: string[];
    readonly sortableGameVersions: SortableGameVersion[];
    readonly dependencies: FileDependency[];
    readonly exposeAsAlternative: boolean | null;
    readonly parentProjectFileId: number | null;
    readonly alternateFileId: number | null;
    readonly isServerPack: boolean | null;
    readonly serverPackFileId: number | null;
    readonly fileFingerprint: bigint;
    readonly modules: FileModule[];
    constructor(_client: Curseforge, data: any);
    /**
     * @hidden
     */
    private _download;
    /**
     * Download this [[ModFile]].
     * @param path The path where the file should be saved.
     * @param verify Should the downloaded files hash be checked?
     * @returns the Promise resolves with true if download was successful and the hash fits (if verify is true.) returns false otherwise.
     */
    download(path: PathLike, verify?: boolean): Promise<boolean>;
    /**
     * Get the mod associated with this mod file.
     * @returns the mod for this mod file.
     */
    get_mod(): Promise<Mod>;
    /**
     *
     * @param relations The types to get. This is a filter list to make sure that only requested dependencies are downloaded.
     * @returns a list of [[ModFile]] which got found as dependencies. Can be an empty array.
     */
    get_dependencies(relations?: FileRelationType[]): Promise<ModFile[]>;
    /**
     * Get the changelog for this specific [[ModFile.]]
     * @returns The changelog in html.
     */
    get_changelog(): Promise<string>;
}
//# sourceMappingURL=ModFile.d.ts.map