import { ModFile, Category } from ".";
import { FileHashAlgorithms, FileRelationType, FileReleaseType, ModLoaderType, ModsSearchSortField } from "./enums";
export declare type GameAssets = {
    iconUrl: string;
    tileUrl: string;
    coverUrl: string;
};
export declare type Pagination = {
    index: number;
    /**
     * Maximum allowed PageSize is 50.
     */
    pageSize: number;
    resultCount: number;
    totalCount: number;
};
export declare type FileHash = {
    value: string;
    algo: FileHashAlgorithms;
};
export declare type SortableGameVersion = {
    gameVersionName: string;
    gameVersionPadded: string;
    gameVersion: string;
    gameVersionReleaseDate: Date;
    gameVersionTypeId: number | null;
};
export declare type FileIndex = {
    gameVersion: string;
    fileId: number;
    filename: string;
    releaseType: FileReleaseType;
    gameVersionTypeId: number | null;
    modLoader: ModLoaderType | null;
};
export declare type FileDependency = {
    modId: number;
    fileId: number;
    relationType: FileRelationType;
};
export declare type FileModule = {
    name: string;
    fingerprint: bigint;
};
export declare type PagingOptions = {
    index?: number;
    pageSize?: number;
};
export declare type SearchOptions = {
    classId?: number | Category;
    categoryId?: number | Category;
    gameVersion?: string;
    searchFilter?: string;
    sortField?: ModsSearchSortField;
    sortOrder?: "asc" | "desc";
    modLoaderType?: string;
    gameVersionTypeId?: number;
};
export declare type ModLinks = {
    websiteUrl: string;
    wikiUrl: string;
    issuesUrl: string;
    sourceUrl: string;
};
export declare type ModAuthor = {
    id: number;
    name: string;
    url: string;
};
export declare type ModAsset = {
    id: number;
    modId: number;
    title: string;
    description: string;
    thumbnailUrl: string;
    url: string;
};
export declare type GameVersionsByType = {
    type: number;
    versions: string[];
};
/**
 * the game version type (Retail / Console / etc.)
 */
export declare type GameVersionType = {
    id: number;
    gameId: number;
    name: string;
    slug: string;
};
export declare type FingerprintMatch = {
    id: number;
    file: ModFile;
    latestFiles: ModFile[];
};
export declare type FingerprintMatchResult = {
    isCacheBuilt: boolean;
    exactMatches: FingerprintMatch[];
    exactFingerprints: number[];
    partialMatches: FingerprintMatch[];
    partialMatchFingerprints: object;
    additionalProperties?: number[];
    installedFingerprints: number[];
    unmatchedFingerprints: number[];
};
export declare type FingerprintFuzzyMatch = {
    id: number;
    file: ModFile;
    latestFiles: ModFile[];
    fingerprints: number[];
};
export declare type FolderFingerprints = {
    foldername: string;
    fingerprints: number[];
};
//# sourceMappingURL=types.d.ts.map