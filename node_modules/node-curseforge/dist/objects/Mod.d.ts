import { Category, ModFile } from ".";
import Curseforge from "..";
import { ModLoaderType, ModStatus } from "./enums";
import { CFObject } from "./interfaces";
import { FileIndex, ModAsset, ModAuthor, ModLinks, Pagination, PagingOptions } from "./types";
/**
 * Class for working with a specific mod from the CF-Core api.
 * Use the Curseforge class to get mod objects.
 */
export default class Mod extends CFObject {
    /**
    * the id of the mod.
    */
    readonly id: number;
    /**
    * the id of the game of the mod.
    */
    readonly gameId: number;
    /**
    * the name of this mod.
    */
    readonly name: string;
    /**
    * the slug (string-id) of the mod.
    */
    readonly slug: string;
    /**
     * Additional links related to the mod.
     */
    readonly links: ModLinks;
    /**
     * A brief summary of the mod. (Think of it as the Github Repo description)
     */
    readonly summary: string;
    /**
     * The curseforge approval status of the mod.
     */
    readonly status: ModStatus;
    /**
     * The amount this mod got downloaded according to curseforge.
     */
    readonly downloadCount: number;
    /**
     * if this mod is a featured mod.
     */
    readonly isFeatured: boolean;
    /**
     * The root category id of the mod. (Can be a modification or another associated file with the game like a resource pack or a savegame)
     */
    readonly primaryCategoryId: number;
    /**
     * Categories of this mod (also contains root category.)
     */
    readonly categories: Category[];
    /**
     * Authors of this mod.
     */
    readonly authors: ModAuthor[];
    /**
     * The [[ModAsset]] for the logo of this mod. (doesn't need to be in square format)
     */
    readonly logo: ModAsset;
    /**
     * Thumbnails / Screenshots uploaded for this mod.
     */
    readonly thumbnails: ModAsset[];
    /**
     * the file id for the main file (latest release)
     */
    readonly mainFileId: number;
    /**
     * list of latest files from this mod.
     */
    readonly latestFiles: ModFile[];
    readonly latestFilesIndexes: FileIndex[];
    /**
     * the date when the mod page got created.
     */
    readonly dateCreated: Date;
    /**
     * the date when the mod page got updated or files got updated.
     */
    readonly dateModified: Date;
    /**
     * the date when the mod got released. (not the same as created)
     */
    readonly dateReleased: Date;
    /**
     * boolean saying if distribution is allowed or null.
     */
    readonly allowedModDistribution: boolean | null;
    /** @hidden */
    constructor(_client: Curseforge, data: any);
    /**
     *
     * @param searchOptions Options to use when getting the files for this mod.
     * @returns mod files found using this method.
     */
    get_files(searchOptions?: {
        gameVersion?: string;
        modLoaderType?: ModLoaderType | number;
        gameVersionTypeId?: number;
    } & PagingOptions): Promise<ModFile[] & {
        "paging": Pagination;
    }>;
    /**
     * Get the description for this mod in html.
     * @returns html string.
     */
    get_description(): Promise<string>;
    /**
     * Return a specific file from this mod.
     * @param fileId the id of the file to query.
     * @returns [[ModFile]] associated for this file or throws an error.
     */
    get_file(fileId: number): Promise<ModFile>;
}
//# sourceMappingURL=Mod.d.ts.map