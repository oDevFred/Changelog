import { GameAssets, GameVersionType, Pagination, PagingOptions, SearchOptions } from "./types";
import { CoreStatus, CoreApiStatus } from "./enums";
import Curseforge from "..";
import { CFObject } from "./interfaces";
import { Mod } from ".";
import { Category } from ".";
/**
 * Represents a specific game from the CF-Core api.
 */
export default class Game extends CFObject {
    /**
     * The id of the game.
     * @readonly
     */
    readonly id: number;
    /**
     * The name of the game.
     * @readonly
     */
    readonly name: string;
    /**
     * The slug of the game.
     * a slug is a string identifier.
     * @readonly
     */
    readonly slug: string;
    /**
     * the Date when the game got last modified. Does not include changes in the mods.
     * @readonly
     */
    readonly dateModified: Date;
    /**
     * Assets related to the game.
     * @readonly
     */
    readonly assets: GameAssets;
    /**
     * The game status.
     * @readonly
     */
    readonly status: CoreStatus;
    /**
     * The api status for the game.
     * @readonly
     */
    readonly apiStatus: CoreApiStatus;
    constructor(_client: Curseforge, data: any);
    /**
     * Get the categories for this game.
     * @param classId Optional TopLevel id of the category to get from.
     * @returns a list of categories.
     */
    get_categories(classId?: number | Category): Promise<Category[]>;
    /**
     * Search for "mods" related to this game.
     * Mods also by default includes things like Resource packs / mod packs / custom worlds. Make sure to use the proper Top-Level Category if you only wants to find game modifications.
     * @param options Optional Options for searching and Paging.
     * @returns a list of found [[Mod]] as well as a paging value for Pagination.
     */
    search_mods(options?: SearchOptions & PagingOptions): Promise<Mod[] & {
        paging: Pagination;
    }>;
    /**
     *
     * @param gameVersionType Optional game version type to look for.
     * @param excludedMods a list of mods to not include.
     * @returns an object with multiple lists of [[Mod]]
     */
    get_featured(gameVersionType?: number | GameVersionType, excludedMods?: number[]): Promise<{
        featured: Mod[];
        popular: Mod[];
        recentlyUpdated: Mod[];
    }>;
}
//# sourceMappingURL=Game.d.ts.map